/*
 * my_i2c.h
 *
 *  Created on: 6 лют. 2017 р.
 *      Author: Kitaro
 */

#ifndef INCLUDE_DRIVER_MY_I2C_H_
#define INCLUDE_DRIVER_MY_I2C_H_

#include "user_config.h"
#include "ets_sys.h"
#include "osapi.h"

uint8 i2c_Do;
#define i2c_Busy 0b01000000 // Trans is Busy Битмаска флага "Передатчик занят, руками не трогать".
#define i2c_Free 0b10111111 // Trans is Free Битмаска снятия флага занятости.

#define i2c_Err_msk 0b00110011 // Маска кода ошибок
#define i2c_Err_NO 0b00000000 // All Right! -- Все окей, передача успешна.
#define i2c_ERR_NA 0b00010000 // Device No Answer -- Слейв не отвечает. Т.к. либо занят, либо его нет на линии.
#define i2c_ERR_LP 0b00100000 // Low Priority -- нас перехватили собственным адресом, либо мы проиграли арбитраж
#define i2c_ERR_NK 0b00000010 // Received NACK. End Transmittion. -- Был получен NACK. Бывает и так.
#define i2c_ERR_BF 0b00000001 // BUS FAIL -- Автобус сломался. И этим все сказано. Можно попробовать сделать переинициализацию шины

#define i2c_global_MaxBuffer 48	//	Величина буфера для всіх модулів, що використовують I2C
#define i2c_MaxBuffer i2c_global_MaxBuffer // Величина буфера Master режима RX-TX. Зависит от того какой длины строки мы будем гонять

#define i2c_sarp 0b00000000 // Start-Addr_R-Read-Stop Это режим простого чтения. Например из слейва или из епрома с текущего адреса
#define i2c_sawp 0b00000100 // Start-Addr_W-Write-Stop Это режим простой записи. В том числе и запись с адресом страницы.
#define i2c_sawsarp 0b00001000 // Start-Addr_W-WrPageAdr-rStart-Addr_R-Read-Stop Это режим с предварительной записью текущего адреса страницы

#define MACRO_i2c_WhatDo_MasterOut (MasterOutFunc)(); // Макросы для режимо выхода. Пока тут функция, но может быть что угодно
#define MACRO_i2c_WhatDo_ErrorOut (ErrorOutFunc)();
#define i2c_packet_lenght 8


typedef void (*IIC_F)(void);	// Тип указателя на функцию
extern IIC_F MasterOutFunc;	// Подрбрости в сишнике.
extern IIC_F ErrorOutFunc;
void DoNothing(void);

uint8 i2c_Buffer[i2c_MaxBuffer];
uint8 i2c_index;
extern uint8 i2c_ByteCount;


os_timer_t i2c_timer;


uint8 i2c_Write_Addr_Buffer(uint8 SAddr, uint8 Addr, uint8 Byte[], uint8 ByteNumbers, IIC_F WhatDo);
uint8 i2c_Write_Buffer(uint8 SAddr,  uint8 Byte[], uint8 ByteNumbers, IIC_F WhatDo);
uint8 i2c_Read_Addr_Buffer(uint8 SAddr, uint8 Addr, uint8 ByteNumbers, IIC_F WhatDo);	// Надсилаємо дані з масиву Byte[] довжиною ByteNumbers
uint8 i2c_Read_Buffer(uint8 SAddr, uint8 ByteNumbers, IIC_F WhatDo);
uint8 i2c_Test_Write(uint8 SAddr);	// Перевірка, чи є такий адрес на шині

#endif /* INCLUDE_DRIVER_MY_I2C_H_ */
